// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// DatabaseTableSpecApplyConfiguration represents an declarative configuration of the DatabaseTableSpec type for use
// with apply.
type DatabaseTableSpecApplyConfiguration struct {
	ServerName              *string                                 `json:"serverName,omitempty"`
	PreferredImplementation *string                                 `json:"preferredImplementation,omitempty"`
	Columns                 []DatabaseTableColumnApplyConfiguration `json:"columns,omitempty"`
	References              []v1.ObjectReference                    `json:"references,omitempty"`
}

// DatabaseTableSpecApplyConfiguration constructs an declarative configuration of the DatabaseTableSpec type for use with
// apply.
func DatabaseTableSpec() *DatabaseTableSpecApplyConfiguration {
	return &DatabaseTableSpecApplyConfiguration{}
}

// WithServerName sets the ServerName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServerName field is set to the value of the last call.
func (b *DatabaseTableSpecApplyConfiguration) WithServerName(value string) *DatabaseTableSpecApplyConfiguration {
	b.ServerName = &value
	return b
}

// WithPreferredImplementation sets the PreferredImplementation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PreferredImplementation field is set to the value of the last call.
func (b *DatabaseTableSpecApplyConfiguration) WithPreferredImplementation(value string) *DatabaseTableSpecApplyConfiguration {
	b.PreferredImplementation = &value
	return b
}

// WithColumns adds the given value to the Columns field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Columns field.
func (b *DatabaseTableSpecApplyConfiguration) WithColumns(values ...*DatabaseTableColumnApplyConfiguration) *DatabaseTableSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithColumns")
		}
		b.Columns = append(b.Columns, *values[i])
	}
	return b
}

// WithReferences adds the given value to the References field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the References field.
func (b *DatabaseTableSpecApplyConfiguration) WithReferences(values ...v1.ObjectReference) *DatabaseTableSpecApplyConfiguration {
	for i := range values {
		b.References = append(b.References, values[i])
	}
	return b
}
