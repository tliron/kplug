// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tliron/kplug/examples/database-table/operator/resources/myorg.org/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabaseTableLister helps list DatabaseTables.
// All objects returned here must be treated as read-only.
type DatabaseTableLister interface {
	// List lists all DatabaseTables in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseTable, err error)
	// DatabaseTables returns an object that can list and get DatabaseTables.
	DatabaseTables(namespace string) DatabaseTableNamespaceLister
	DatabaseTableListerExpansion
}

// databaseTableLister implements the DatabaseTableLister interface.
type databaseTableLister struct {
	indexer cache.Indexer
}

// NewDatabaseTableLister returns a new DatabaseTableLister.
func NewDatabaseTableLister(indexer cache.Indexer) DatabaseTableLister {
	return &databaseTableLister{indexer: indexer}
}

// List lists all DatabaseTables in the indexer.
func (s *databaseTableLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseTable, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseTable))
	})
	return ret, err
}

// DatabaseTables returns an object that can list and get DatabaseTables.
func (s *databaseTableLister) DatabaseTables(namespace string) DatabaseTableNamespaceLister {
	return databaseTableNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabaseTableNamespaceLister helps list and get DatabaseTables.
// All objects returned here must be treated as read-only.
type DatabaseTableNamespaceLister interface {
	// List lists all DatabaseTables in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseTable, err error)
	// Get retrieves the DatabaseTable from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DatabaseTable, error)
	DatabaseTableNamespaceListerExpansion
}

// databaseTableNamespaceLister implements the DatabaseTableNamespaceLister
// interface.
type databaseTableNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabaseTables in the indexer for a given namespace.
func (s databaseTableNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseTable, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseTable))
	})
	return ret, err
}

// Get retrieves the DatabaseTable from the indexer for a given namespace and name.
func (s databaseTableNamespaceLister) Get(name string) (*v1alpha1.DatabaseTable, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("databasetable"), name)
	}
	return obj.(*v1alpha1.DatabaseTable), nil
}
